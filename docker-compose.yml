# Docker Compose file Reference (https://docs.docker.com/compose/compose-file/)

version: '3.4'

services:
  ipfs:
    image: ceramicnetwork/ipfs-daemon:${IPFS_IMAGE_TAG}
    ports:
      - ${IPFS_SWARM_TCP_PORT}:${IPFS_SWARM_TCP_PORT}
      - ${IPFS_SWARM_WS_PORT}:${IPFS_SWARM_WS_PORT}
      - ${IPFS_API_PORT}:${IPFS_API_PORT}
      - ${IPFS_GATEWAY_PORT}:${IPFS_GATEWAY_PORT}
      - ${IPFS_HEALTHCHECK_PORT}:${IPFS_HEALTHCHECK_PORT}
    volumes:
      - ${PWD}/data/ipfs:/${IPFS_PATH}
    environment:
      - DEBUG=${IPFS_DEBUG}
      - HEALTHCHECK_ENABLED=${IPFS_HEALTHCHECK_ENABLED}
      - HEALTHCHECK_PORT=${IPFS_HEALTHCHECK_PORT}
      - IPFS_API_PORT=${IPFS_API_PORT}
      - IPFS_ENABLE_API=${IPFS_ENABLE_API}
      - IPFS_ENABLE_GATEWAY=${IPFS_ENABLE_GATEWAY}
      - IPFS_ENABLE_PUBSUB=${IPFS_ENABLE_PUBSUB}
      - IPFS_GATEWAY_PORT=${IPFS_GATEWAY_PORT}
      - IPFS_PATH=${IPFS_PATH}
      - IPFS_SWARM_TCP_PORT=${IPFS_SWARM_TCP_PORT}
      - IPFS_SWARM_WS_PORT=${IPFS_SWARM_WS_PORT}
      - NODE_TLS_REJECT_UNAUTHORIZED=${NODE_TLS_REJECT_UNAUTHORIZED}

  ganache:
    image: trufflesuite/ganache-cli:latest
    ports:
      - ${GANACHE_PORT}:${GANACHE_PORT}
    volumes:
      - ${PWD}/data/ganache:/ganache/db
    entrypoint:
      - node
      - /app/ganache-core.docker.cli.js
      - --deterministic
      - --db=/db
      - --mnemonic
      - 'move sense much taxi wave hurry recall stairs thank brother nut woman'
      - --networkId
      - '5777'
      - --hostname
      - '0.0.0.0'
      - -l
      - '80000000'
      - --quiet

  cas:
    image: ceramicnetwork/ceramic-anchor-service:${CAS_IMAGE_TAG}
    volumes:
      - ${PWD}/data/cas/data:/cas/data
    ports:
      - ${CAS_APP_PORT}:${CAS_APP_PORT}
    environment:
      - NODE_ENV=${NODE_ENV}
      - ANCHOR_EXPIRATION_PERIOD=${ANCHOR_EXPIRATION_PERIOD}
      - ANCHOR_SCHEDULE_EXPRESSION=${ANCHOR_SCHEDULE_EXPRESSION}
      - APP_MODE=${CAS_APP_MODE}
      - APP_PORT=${CAS_APP_PORT}
      - BLOCKCHAIN_CONNECTOR=${BLOCKCHAIN_CONNECTOR}
      - IPFS_API_URL=${IPFS_API_URL}

      - ETH_NETWORK=${ETH_NETWORK}
      - ETH_OVERRIDE_GAS_CONFIG=${ETH_OVERRIDE_GAS_CONFIG}
      - ETH_GAS_LIMIT=${ETH_GAS_LIMIT}
      - ETH_GAS_PRICE=${ETH_GAS_PRICE}
      - ETH_RPC_HOST=${CAS_ETH_RPC_HOST}
      - ETH_RPC_PORT=${CAS_ETH_RPC_PORT}
      - ETH_WALLET_PK=${ETH_WALLET_PK}

      - LOG_LEVEL=${LOG_LEVEL}
      - MERKLE_DEPTH_LIMIT=${MERKLE_DEPTH_LIMIT}

      - TYPEORM_CONNECTION=${TYPEORM_CONNECTION}
      - TYPEORM_DATABASE=${TYPEORM_DATABASE}
      - TYPEORM_ENTITIES=${TYPEORM_ENTITIES}
      - TYPEORM_HOST=${TYPEORM_HOST}
      - TYPEORM_LOGGING=${TYPEORM_LOGGING}
      - TYPEORM_PASSWORD=${TYPEORM_PASSWORD}
      - TYPEORM_PORT=${TYPEORM_PORT}
      - TYPEORM_SYNCHRONIZE=${TYPEORM_SYNCHRONIZE}
      - TYPEORM_USERNAME=${TYPEORM_USERNAME}
      - VALIDATE_RECORDS=${VALIDATE_RECORDS}
    depends_on:
      - ganache
      - ipfs
    command: >
      /bin/bash -c "
        while ! nc -z ganache ${GANACHE_PORT};
        do
          sleep 1;
        done;
        npm start
      "

  ceramic:
    image: ceramicnetwork/js-ceramic:${CERAMIC_IMAGE_TAG}
    ports:
      - ${CERAMIC_DAEMON_PORT}:${CERAMIC_DAEMON_PORT}
    volumes:
      - ${PWD}/data/ceramic:/.ceramic
    depends_on:
      - cas
      - ipfs
    entrypoint: ""
    command: >
      /bin/bash -c "
        while ! nc -z cas ${CAS_APP_PORT};
        do
          sleep 1;
        done;
        cd packages/cli
        ./bin/ceramic.js daemon \
          --debug ${CERAMIC_DEBUG} \
          --network ${CERAMIC_NETWORK} \
          --port ${CERAMIC_DAEMON_PORT} \
          --ipfs-api http://ipfs:${IPFS_API_PORT} \
          --anchor-service-api http://cas:${CAS_APP_PORT} \
          --ethereum-rpc ${CERAMIC_ETH_RPC}
      "
